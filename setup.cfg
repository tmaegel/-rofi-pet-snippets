[metadata]
name = rofi_pet_snippets
version = attr: rofi_pet_snippets.VERSION
description = Rofi script/plugin to list, search and copy pet snippets to clipboard (wayland only)
long_description = file: README.md, CHANGELOG.md, LICENSE
long_description_content_type = text/markdown
author = Toni MÃ¤gel
author_email = tmaegel@posteo.de
project_url = https://github.com/tmaegel/rofi-pet-snippets
keywords = rofi, pet, snippets

[options]
zip_safe = False
include_package_data = True
packages = find:
install_requires =

[options.entry_points]
console_scripts =
    rofi-pet-snippets = rofi_pet_snippets:main

[options.package_data]
* = *.txt, *.md

# These dependencies will only be installed
# if you ask for them, e.g. pip install -e ".[dev]".
[options.extras_require]
dev =
  flake8==4.0.1
  mypy==0.950
  pytest==7.1.2
  pytest-cov==3.0.0

[flake8]
exclude = .git, .eggs, __pycache__, docs/, build/, dist/, venv/, .mypy_cache, .pytest_cache, instance/
max-line-length=88

[mypy]
disallow_any_decorated = True
disallow_any_generics = True
disallow_any_unimported = False
disallow_subclassing_any = False
disallow_untyped_calls = True
# disallow_untyped_defs = True
ignore_missing_imports = True
warn_unused_ignores = True
warn_return_any = True

[isort]
skip_glob = venv/*
profile = black

[tool:pytest]
testpaths = tests

[coverage:run]
branch = True
source = rofi_pet_snippets

[coverage:report]
show_missing = True
exclude_lines =
  # Have to re-enable the standard pragma
  pragma: no cover
  # Don't complain about missing debug-only code:
  def __repr__
  if self.debug:
  if settings.DEBUG
  # Don't complain if tests don't hit defensive assertion code:
  raise AssertionError
  raise NotImplementedError
  # Don't complain if non-runnable code isn't run:
  if 0:
  if False:
  if __name__ == .__main__.:
